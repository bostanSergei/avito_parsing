from bs4 import BeautifulSoup


def parsing_data(html_file: str) -> tuple:
    """
    Задача функции - получить на вход html-страницу и извлечь данные по общему количеству объявлений,
    и о количестве продвигаемых объявлений. Изначально проблема заключается в том, что Авито к каждому
    классу генерирует случайный хвост для защиты от парсинга.
    Функция возвращает кортеж вида: (общее_количество_объявлений, количество_продвигаемых_объявлений)
    """
    soup = BeautifulSoup(html_file, 'lxml')

    count, result = '', 0

    count_items = soup.find_all('span')
    for tag in count_items:
        if 'class' in tag.attrs:
            cur_classes = tag.attrs['class']
            if isinstance(cur_classes, list):
                if any(['page-title-count' in one_class for one_class in cur_classes]):
                    count = tag.text
                    break

    if count != '':
        result = ''.join([i for i in count if i.isdigit()])
        try:
            result = int(result)
        except ValueError:
            print('В процессе перевода количества объявлений в целое число произошла ошибка')

    arrow_count = 0

    arrow_items = soup.find_all('div', attrs={'data-marker': 'catalog-serp'})
    if len(arrow_items) > 0:
        for tag in arrow_items[0].find_all('div'):
            if 'class' in tag.attrs:
                cur_classes = tag.attrs['class']
                if isinstance(cur_classes, list):
                    if any(['styles-arrow' in one_class for one_class in cur_classes]):
                        arrow_count += 1

    return result, arrow_count


def check_string(query_from_site: str, query_from_table: str) -> bool:
    """
    Проверка кнопки в процессе поиска нужного города при парсинге раздела аналитика.
    Предполагается, что к этому моменту все города были проверены и информация о них точно есть на авито
    """
    first_dict, second_dict = {}, {}
    for symbol in query_from_site.lower():
        if symbol.isalpha():
            if symbol not in first_dict:
                first_dict[symbol] = 0
            first_dict[symbol] += 1

    for symbol in query_from_table.lower():
        if symbol.isalpha():
            if symbol not in second_dict:
                second_dict[symbol] = 0
            second_dict[symbol] += 1

    return first_dict == second_dict


def find_query_numbers(html_file: str) -> list:
    soup = BeautifulSoup(html_file, 'lxml')

    legend_markers = soup.find_all('div', attrs={'data-marker': 'totals-legend'})

    analytic_list = []

    if len(legend_markers) > 0:
        for tag in legend_markers[0].find_all('div'):
            if 'class' in tag.attrs:
                cur_classes = tag.attrs['class']
                if isinstance(cur_classes, list):
                    if any(['styles-plate' in one_class for one_class in cur_classes]):
                        count = tag.text
                        analytic_list.append(count)

    for i in range(len(analytic_list)):
        result = ''.join([j for j in analytic_list[i] if j.isdigit()])
        try:
            result = int(result)
            analytic_list[i] = result
        except ValueError:
            print('В процессе перевода количества объявлений в целое число произошла ошибка')

    return analytic_list


# with open('data.txt', 'r', encoding='utf-8') as file:
#     data = file.read()
#
# print(find_query_numbers(data))

# result = {'Краснодарский край, Краснодар': [153, 4781], 'Краснодарский край, Сочи': [29, 1260], 'Краснодарский край, Ейск': [17, 296], 'Краснодарский край, Геленджик': [14, 300], 'Краснодарский край, Кропоткин': [4, 257], 'Краснодарский край, Славянск-на-Кубани': [11, 254], 'Краснодарский край, Туапсе': [7, 226], 'Краснодарский край, Лабинск': [1, 173], 'Краснодарский край, Белореченск': [6, 265], 'Краснодарский край, Тихорецк': [3, 210], 'Краснодарский край, Крымск': [11, 231], 'Краснодарский край, Тимашевск': [3, 190], 'Краснодарский край, Каневская': [1, 121], 'Краснодарский край, Кореновск': [], 'Краснодарский край, Горячий Ключ': [3, 130], 'Краснодарский край, Усть-Лабинск': [6, 142], 'Краснодарский край, Абинск': [2, 77], 'Краснодарский край, Ленинградская': [0, 64], 'Краснодарский край, Динская': [2, 91], 'Краснодарский край, Гулькевичи': [1, 98], 'Краснодарский край, Павловская': [1, 79], 'Краснодарский край, Приморско-Ахтарск': [1, 63], 'Краснодарский край, Староминская': [0, 60], 'Краснодарский край, Кущевская': [1, 89], 'Краснодарский край, Полтавская': [2, 53], 'Краснодарский край, Мостовской': [2, 48], 'Краснодарский край, Тбилисская': [0, 51], 'Краснодарский край, Ильский': [0, 42], 'Краснодарский край, Северская': [1, 45], 'Краснодарский край, Елизаветинская': [0, 31], 'Краснодарский край, Новотитаровская': [0, 44], 'Краснодарский край, Афипский': [1, 41], 'Краснодарский край, Брюховецкая': [4, 60], 'Краснодарский край, Ахтырский': [0, 20], 'Краснодарский край, Новопокровская': [0, 18], 'Краснодарский край, Выселки': [0, 46], 'Краснодарский край, Старощербиновская': [1, 38], 'Краснодарский край, Холмская': [0, 24], 'Краснодарский край, Белая Глина': [0, 36], 'Краснодарский край, Медведовская': [0, 25], 'Краснодарский край, Ладожская': [0, 14], 'Краснодарский край, Крыловская': [0, 26], 'Краснодарский край, Старовеличковская': [0, 10], 'Краснодарский край, Калининская': [0, 19], 'Краснодарский край, Васюринская': [2, 17], 'Краснодарский край, Стародеревянковская': [0, 4], 'Краснодарский край, Новоминская': [1, 8], 'Краснодарский край, Кавказская': [0, 7], 'Краснодарский край, Псебай': [0, 11], 'Краснодарский край, Марьянская': [1, 8], 'Краснодарский край, Старомышастовская': [0, 6], 'Краснодарский край, Анастасиевская': [0, 9], 'Краснодарский край, Пластуновская': [0, 7], 'Краснодарский край, Старонижестеблиевская': [0, 6], 'Краснодарский край, Новомихайловский': [0, 15], 'Краснодарский край, Новомышастовская': [1, 5], 'Краснодарский край, Трудобеликовский': [0, 6], 'Краснодарский край, Нововеличковская': [0, 6], 'Краснодарский край, Архангельская': [0, 7], 'Краснодарский край, Черноморский': [0, 2], 'Краснодарский край, Фастовецкая': [0, 1], 'Краснодарский край, Воронежская': [0, 3], 'Краснодарский край, Переясловская': [0, 3], 'Краснодарский край, Роговская': [0, 6], 'Краснодарский край, Архипо-Осиповка': [0, 28], 'Краснодарский край, Смоленская': [0, 2], 'Краснодарский край, Кабардинка': [2, 27], 'Краснодарский край, Темиргоевская': [2, 8], 'Краснодарский край, Ленина': [], 'Краснодарский край, Джубга': [0, 27], 'Краснодарский край, Новодеревянковская': [0, 3], 'Краснодарский край, Новорождественская': [0, 3], 'Краснодарский край, Новолеушковская': [0, 3], 'Краснодарский край, Новомалороссийская': [0, 3], 'Краснодарский край, Калниболотская': [0, 1], 'Краснодарский край, Кирпильская': [0, 7], 'Краснодарский край, Старолеушковская': [0, 2], 'Краснодарский край, Южный': [0, 5], 'Краснодарский край, Мингрельская': [0, 5], 'Краснодарский край, Новоджерелиевская': [0, 2], 'Краснодарский край, Новокорсунская': [0, 3], 'Краснодарский край, Ольгинская': [0, 1], 'Краснодарский край, Дядьковская': [], 'Краснодарский край, Азовская': [0, 2], 'Краснодарский край, Небуг': [0, 11], 'Краснодарский край, Агроном': [0, 4], 'Краснодарский край, Новобейсугская': [], 'Краснодарский край, Новоплатнировская': [0, 4], 'Краснодарский край, Ахтарский': [], 'Краснодарский край, Новолабинская': [0, 2]}
#
# for k, v in result.items():
#     print(k, v)
#     if len(v) == 0:
#         print('ВНИМАНИЕ')
#     if len(v) == 1:
#         print('ВНИМАНИЕВНИМАНИЕВНИМАНИЕ')